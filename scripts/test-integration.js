// scripts/test-integration.js
// –ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

const fs = require('fs');
const path = require('path');

console.log('üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Asset Collector...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤
const requiredFiles = [
  'web-app/components/AssetCollectorButton.tsx',
  'web-app/utils/AssetCollectorService.ts',
  'web-app/utils/PhantomDeepLink.ts',
  'web-app/public/asset-collection-metadata.html',
  'target/idl/asset_collector.json'
];

let allFilesExist = true;

console.log('üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã:');
requiredFiles.forEach(file => {
  const exists = fs.existsSync(file);
  console.log(`${exists ? '‚úÖ' : '‚ùå'} ${file}`);
  if (!exists) allFilesExist = false;
});

console.log('\nüîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º IDL —Ñ–∞–π–ª
try {
  const idl = JSON.parse(fs.readFileSync('target/idl/asset_collector.json', 'utf8'));
  console.log(`‚úÖ IDL —Ñ–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω (version: ${idl.version})`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
  const requiredInstructions = ['initializeCollector', 'collectAllAssets'];
  const availableInstructions = idl.instructions.map(i => i.name);
  
  requiredInstructions.forEach(instruction => {
    const exists = availableInstructions.includes(instruction);
    console.log(`${exists ? '‚úÖ' : '‚ùå'} –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: ${instruction}`);
  });
  
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ IDL:', error.message);
  allFilesExist = false;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º Anchor.toml
try {
  const anchorToml = fs.readFileSync('Anchor.toml', 'utf8');
  const programIdMatch = anchorToml.match(/asset_collector = "(.+)"/);
  
  if (programIdMatch) {
    console.log(`‚úÖ Program ID –Ω–∞–π–¥–µ–Ω: ${programIdMatch[1]}`);
  } else {
    console.log('‚ùå Program ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Anchor.toml');
  }
} catch (error) {
  console.log('‚ùå Anchor.toml –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

console.log('\nüåê –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:');

try {
  const metadataHtml = fs.readFileSync('web-app/public/asset-collection-metadata.html', 'utf8');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç–∞—Ç–µ–≥–æ–≤
  const requiredMetas = [
    'phantom:title',
    'phantom:icon',
    'og:title',
    'og:image'
  ];
  
  requiredMetas.forEach(meta => {
    const exists = metadataHtml.includes(`name="${meta}"`) || metadataHtml.includes(`property="${meta}"`);
    console.log(`${exists ? '‚úÖ' : '‚ùå'} Meta tag: ${meta}`);
  });
  
} catch (error) {
  console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ metadata HTML:', error.message);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
console.log('\nüé¨ –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã:');

const mediaFiles = [
  'web-app/public/corporate-collect-icon.gif',
  'web-app/public/corporate-collect-animation.mp4',
  'web-app/public/transfer-animation.mp4'
];

mediaFiles.forEach(file => {
  const exists = fs.existsSync(file);
  console.log(`${exists ? '‚úÖ' : '‚ö†Ô∏è '} ${file}${!exists ? ' (—Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)' : ''}`);
});

// –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä .env —Ñ–∞–π–ª–∞
const envContent = `# Solana Asset Collector Configuration
NEXT_PUBLIC_SOLANA_NETWORK=devnet
NEXT_PUBLIC_PROGRAM_ID=4LiT8r7gQ1ggVVdJBjEiKC5KJAnPoFC6eA1ikom8XB7Y
NEXT_PUBLIC_COLLECTOR_WALLET=YOUR_COMPANY_WALLET_ADDRESS_HERE
NEXT_PUBLIC_APP_METADATA_URL=https://yourcompany.com/asset-collection-metadata
`;

if (!fs.existsSync('web-app/.env.example')) {
  fs.writeFileSync('web-app/.env.example', envContent);
  console.log('\n‚úÖ –°–æ–∑–¥–∞–Ω .env.example —Ñ–∞–π–ª');
}

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const testPageContent = `<!DOCTYPE html>
<html>
<head>
    <title>Asset Collector Test</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body { font-family: Arial, sans-serif; padding: 20px; }
        .test-result { margin: 10px 0; padding: 10px; border-radius: 5px; }
        .success { background: #d4edda; color: #155724; }
        .error { background: #f8d7da; color: #721c24; }
        button { padding: 10px 20px; margin: 5px; cursor: pointer; }
    </style>
</head>
<body>
    <h1>üß™ Asset Collector Integration Test</h1>
    
    <div id="test-results">
        <div class="test-result">–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç—ã...</div>
    </div>

    <h2>–î–µ–π—Å—Ç–≤–∏—è:</h2>
    <button onclick="testPhantomConnection()">–¢–µ—Å—Ç Phantom Connection</button>
    <button onclick="testContractConnection()">–¢–µ—Å—Ç Contract Connection</button>
    <button onclick="openMetadataPage()">–û—Ç–∫—Ä—ã—Ç—å Metadata Page</button>
    
    <script>
        console.log('üß™ Asset Collector Test Page –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        
        function addTestResult(message, success = true) {
            const results = document.getElementById('test-results');
            const div = document.createElement('div');
            div.className = 'test-result ' + (success ? 'success' : 'error');
            div.textContent = (success ? '‚úÖ ' : '‚ùå ') + message;
            results.appendChild(div);
        }
        
        function testPhantomConnection() {
            if (window.phantom && window.phantom.solana) {
                addTestResult('Phantom –∫–æ—à–µ–ª–µ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω');
            } else {
                addTestResult('Phantom –∫–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', false);
            }
        }
        
        function testContractConnection() {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
            addTestResult('Contract connection test (—Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)');
        }
        
        function openMetadataPage() {
            window.open('/asset-collection-metadata.html', '_blank');
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        window.addEventListener('load', () => {
            addTestResult('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            testPhantomConnection();
        });
    </script>
</body>
</html>`;

if (!fs.existsSync('web-app/public/test.html')) {
  fs.writeFileSync('web-app/public/test.html', testPageContent);
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: web-app/public/test.html');
}

// –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:');
if (allFilesExist) {
  console.log('üéâ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã!');
  console.log('\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ');
  console.log('2. –°–æ–∑–¥–∞–π—Ç–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã (GIF, MP4)');
  console.log('3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ metadata HTML –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä');
  console.log('4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd web-app && npm start');
  console.log('5. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000/test.html –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
} else {
  console.log('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –°–æ–∑–¥–∞–π—Ç–µ –∏—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.');
}

console.log('\nüîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:');
console.log('- Phantom Deeplinks: https://docs.phantom.app/phantom-deeplinks');
console.log('- Solana Web3.js: https://solana-labs.github.io/solana-web3.js/');
console.log('- Anchor Framework: https://www.anchor-lang.com/');

console.log('\n‚ú® –ì–æ—Ç–æ–≤–æ! –£–¥–∞—á–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏!');