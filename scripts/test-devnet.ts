import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { AssetCollector } from "../target/types/asset_collector";
import { 
  PublicKey, 
  Keypair, 
  LAMPORTS_PER_SOL, 
  Connection,
  clusterApiUrl
} from "@solana/web3.js";
import { 
  createMint, 
  createAssociatedTokenAccount, 
  mintTo, 
  getAccount 
} from "@solana/spl-token";

async function main() {
  console.log("üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º Asset Collector –Ω–∞ Devnet...\n");

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ devnet
  const connection = new Connection(clusterApiUrl("devnet"), "confirmed");
  const wallet = anchor.Wallet.local();
  const provider = new anchor.AnchorProvider(connection, wallet, {
    commitment: "confirmed",
  });
  anchor.setProvider(provider);

  const program = anchor.workspace.AssetCollector as Program<AssetCollector>;
  
  console.log("üìã Program ID:", program.programId.toString());
  console.log("üíº Wallet:", wallet.publicKey.toString());
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ—à–µ–ª—å–∫–∏
  const authority = Keypair.generate();
  const collectorWallet = Keypair.generate();
  const userWallet = Keypair.generate();
  
  console.log("\nüîë –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ—à–µ–ª—å–∫–∏:");
  console.log("Authority:", authority.publicKey.toString());
  console.log("Collector:", collectorWallet.publicKey.toString());
  console.log("User:", userWallet.publicKey.toString());

  // PDA –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [collectorStatePDA] = PublicKey.findProgramAddressSync(
    [Buffer.from("collector-state")],
    program.programId
  );
  console.log("üìç Collector State PDA:", collectorStatePDA.toString());

  try {
    // 1. –ü–æ–ø–æ–ª–Ω—è–µ–º –∫–æ—à–µ–ª—å–∫–∏ –≤ devnet
    console.log("\nüí∞ –ü–æ–ø–æ–ª–Ω—è–µ–º –∫–æ—à–µ–ª—å–∫–∏...");
    
    console.log("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º airdrop –¥–ª—è authority...");
    const airdropAuthority = await connection.requestAirdrop(
      authority.publicKey,
      2 * LAMPORTS_PER_SOL
    );
    await connection.confirmTransaction(airdropAuthority);
    
    console.log("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º airdrop –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
    const airdropUser = await connection.requestAirdrop(
      userWallet.publicKey,
      1 * LAMPORTS_PER_SOL
    );
    await connection.confirmTransaction(airdropUser);
    
    console.log("‚úÖ Airdrop –∑–∞–≤–µ—Ä—à–µ–Ω");

    // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    console.log("\nüèóÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç...");
    
    try {
      const tx1 = await program.methods
        .initializeCollector()
        .accounts({
          collectorState: collectorStatePDA,
          authority: authority.publicKey,
          systemProgram: anchor.web3.SystemProgram.programId,
        })
        .signers([authority])
        .rpc();
      
      console.log("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, TX:", tx1);
    } catch (error: any) {
      if (error.message.includes("already in use")) {
        console.log("‚ÑπÔ∏è  –ö–æ–Ω—Ç—Ä–∞–∫—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
      } else {
        throw error;
      }
    }

    // 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—à–µ–ª–µ–∫-–ø–æ–ª—É—á–∞—Ç–µ–ª—å
    console.log("\n‚öôÔ∏è  –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—à–µ–ª–µ–∫-–ø–æ–ª—É—á–∞—Ç–µ–ª—å...");
    
    const tx2 = await program.methods
      .setCollectorWallet(collectorWallet.publicKey)
      .accounts({
        collectorState: collectorStatePDA,
        authority: authority.publicKey,
      })
      .signers([authority])
      .rpc();
    
    console.log("‚úÖ –ö–æ—à–µ–ª–µ–∫-–ø–æ–ª—É—á–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, TX:", tx2);

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log("\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...");
    const state = await program.account.collectorState.fetch(collectorStatePDA);
    console.log("Authority:", state.authority.toString());
    console.log("Collector Wallet:", state.collectorWallet.toString());
    console.log("Gas Reserve:", state.gasReserve.toString(), "lamports");

    // 5. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π SPL —Ç–æ–∫–µ–Ω
    console.log("\nü™ô –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π SPL —Ç–æ–∫–µ–Ω...");
    
    const mint = await createMint(
      connection,
      authority, // payer
      authority.publicKey, // mint authority
      null, // freeze authority
      9 // decimals
    );
    
    console.log("‚úÖ SPL Token —Å–æ–∑–¥–∞–Ω:", mint.toString());

    // 6. –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –º–∏–Ω—Ç–∏–º —Ç–æ–∫–µ–Ω—ã
    console.log("\nüè¶ –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –∏ –º–∏–Ω—Ç–∏–º —Ç–æ–∫–µ–Ω—ã...");
    
    const userTokenAccount = await createAssociatedTokenAccount(
      connection,
      authority, // payer
      mint,
      userWallet.publicKey // owner
    );
    
    const mintAmount = 1000 * 10**9; // 1000 —Ç–æ–∫–µ–Ω–æ–≤
    await mintTo(
      connection,
      authority, // payer
      mint,
      userTokenAccount,
      authority, // mint authority
      mintAmount
    );
    
    console.log("‚úÖ –¢–æ–∫–µ–Ω—ã –∑–∞–º–∏–Ω—á–µ–Ω—ã:", mintAmount / 10**9, "—Ç–æ–∫–µ–Ω–æ–≤");

    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –¥–æ —Å–±–æ—Ä–∞
    console.log("\nüìà –ë–∞–ª–∞–Ω—Å—ã –î–û —Å–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–æ–≤:");
    
    const userSolBefore = await connection.getBalance(userWallet.publicKey);
    const collectorSolBefore = await connection.getBalance(collectorWallet.publicKey);
    
    console.log(`üë§ User SOL: ${userSolBefore / LAMPORTS_PER_SOL} SOL`);
    console.log(`üèõÔ∏è  Collector SOL: ${collectorSolBefore / LAMPORTS_PER_SOL} SOL`);
    
    const userTokenBefore = await getAccount(connection, userTokenAccount);
    console.log(`ü™ô User Tokens: ${Number(userTokenBefore.amount) / 10**9} —Ç–æ–∫–µ–Ω–æ–≤`);

    // 8. –°–æ–±–∏—Ä–∞–µ–º SOL
    console.log("\nüíé –°–æ–±–∏—Ä–∞–µ–º SOL –∞–∫—Ç–∏–≤—ã...");
    
    const tx3 = await program.methods
      .collectAllAssets()
      .accounts({
        collectorState: collectorStatePDA,
        userWallet: userWallet.publicKey,
        collectorWallet: collectorWallet.publicKey,
        systemProgram: anchor.web3.SystemProgram.programId,
      })
      .signers([userWallet])
      .rpc();
    
    console.log("‚úÖ SOL —Å–æ–±—Ä–∞–Ω, TX:", tx3);

    // 9. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ SOL
    console.log("\nüìä –ë–∞–ª–∞–Ω—Å—ã –ü–û–°–õ–ï —Å–±–æ—Ä–∞ SOL:");
    
    const userSolAfter = await connection.getBalance(userWallet.publicKey);
    const collectorSolAfter = await connection.getBalance(collectorWallet.publicKey);
    
    console.log(`üë§ User SOL: ${userSolAfter / LAMPORTS_PER_SOL} SOL`);
    console.log(`üèõÔ∏è  Collector SOL: ${collectorSolAfter / LAMPORTS_PER_SOL} SOL`);
    console.log(`üìà –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ SOL: ${(collectorSolAfter - collectorSolBefore) / LAMPORTS_PER_SOL} SOL`);

    // 10. –°–æ–±–∏—Ä–∞–µ–º SPL —Ç–æ–∫–µ–Ω—ã (–ø–æ–∫–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ—Ä–∞–±–æ—Ç–∫–∏)
    console.log("\nü™ô –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä SPL —Ç–æ–∫–µ–Ω–æ–≤ (—Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏)...");
    /*
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
      const collectorTokenAccount = await createAssociatedTokenAccount(
        connection,
        authority,
        mint,
        collectorWallet.publicKey
      );

      const tx4 = await program.methods
        .collectSplTokens()
        .accounts({
          collectorState: collectorStatePDA,
          userWallet: userWallet.publicKey,
          collectorWallet: collectorWallet.publicKey,
          mint: mint,
          userTokenAccount: userTokenAccount,
          collectorTokenAccount: collectorTokenAccount,
          tokenProgram: anchor.utils.token.TOKEN_PROGRAM_ID,
          associatedTokenProgram: anchor.utils.token.ASSOCIATED_PROGRAM_ID,
          systemProgram: anchor.web3.SystemProgram.programId,
        })
        .signers([userWallet])
        .rpc();
      
      console.log("‚úÖ SPL —Ç–æ–∫–µ–Ω—ã —Å–æ–±—Ä–∞–Ω—ã, TX:", tx4);
    } catch (error) {
      console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ SPL —Ç–æ–∫–µ–Ω–æ–≤:", error.message);
    }
    */

    console.log("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
  }
}

main().catch(console.error);