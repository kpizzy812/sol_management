// web-app/utils/PhantomDeepLink.js
import { Transaction, PublicKey, Keypair } from '@solana/web3.js';
import bs58 from 'bs58';

export class PhantomDeepLink {
  constructor() {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º keypair –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —Ö—Ä–∞–Ω–∏—Ç–µ –≤ env)
    this.dappKeyPair = Keypair.generate();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ –∫–æ–¥ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
   */
  private isBrowser(): boolean {
    return typeof window !== 'undefined' && typeof navigator !== 'undefined';
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ Phantom —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º UI
   */
  async signAndSendTransaction(transaction, userPublicKey, appMetadataUrl) {
    if (!this.isBrowser()) {
      throw new Error('PhantomDeepLink –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    }

    try {
      // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const serializedTransaction = transaction.serialize({
        requireAllSignatures: false,
        verifySignatures: false
      });

      // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è deeplink
      const params = new URLSearchParams({
        dapp_encryption_public_key: bs58.encode(this.dappKeyPair.publicKey.toBytes()),
        cluster: "devnet", // –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ "mainnet-beta" –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        app_url: appMetadataUrl, // ‚Üê –í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º UI
        redirect_link: `${window.location.origin}/transaction-success`,
        transaction: bs58.encode(serializedTransaction)
      });

      // –°–æ–∑–¥–∞–µ–º Phantom deeplink
      const phantomUrl = `phantom://v1/signAndSendTransaction?${params.toString()}`;
      
      console.log('üì± –û—Ç–∫—Ä—ã–≤–∞–µ–º Phantom —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º UI...');
      console.log('Metadata URL:', appMetadataUrl);
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º Phantom
      if (this.isMobile()) {
        // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
        window.location.href = phantomUrl;
      } else {
        // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
        const popup = window.open(phantomUrl, '_blank', 'width=400,height=600');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫—Ä—ã–ª–æ—Å—å –ª–∏ –æ–∫–Ω–æ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é)
        const checkClosed = setInterval(() => {
          if (popup?.closed) {
            clearInterval(checkClosed);
            console.log('‚úÖ Phantom –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ');
          }
        }, 1000);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Phantom deeplink:', error);
      throw new Error(`Failed to create Phantom transaction: ${error.message}`);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å deeplink –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
   */
  createConnectWalletLink(appMetadataUrl) {
    if (!this.isBrowser()) {
      throw new Error('createConnectWalletLink –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    }

    const params = new URLSearchParams({
      dapp_encryption_public_key: bs58.encode(this.dappKeyPair.publicKey.toBytes()),
      cluster: "devnet",
      app_url: appMetadataUrl,
      redirect_link: `${window.location.origin}/wallet-connected`
    });

    return `phantom://v1/connect?${params.toString()}`;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–±–∏–ª—å–Ω–æ–µ –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
   */
  private isMobile(): boolean {
    if (!this.isBrowser()) return false;
    
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
      navigator.userAgent
    );
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (callback URL)
   */
  static handleTransactionResult(urlParams) {
    const signature = urlParams.get('signature');
    const errorCode = urlParams.get('errorCode');
    const errorMessage = urlParams.get('errorMessage');

    if (signature) {
      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', signature);
      return {
        success: true,
        signature: signature
      };
    } else if (errorCode) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', errorCode, errorMessage);
      return {
        success: false,
        error: errorMessage || `Error code: ${errorCode}`
      };
    }

    return {
      success: false,
      error: 'Unknown error'
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Phantom
   */
  isPhantomAvailable(): boolean {
    if (!this.isBrowser()) return false;
    
    return typeof window !== 'undefined' && !!window.phantom?.solana;
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Phantom –∫–æ—à–µ–ª—å–∫—É (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)
   */
  async connectWallet(): Promise<{ publicKey: PublicKey }> {
    if (!this.isBrowser()) {
      throw new Error('connectWallet –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    }

    if (!this.isPhantomAvailable()) {
      throw new Error('Phantom –∫–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ Phantom.');
    }

    try {
      const response = await window.phantom!.solana!.connect();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Phantom:', response.publicKey.toString());
      return response;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Phantom:', error);
      throw error;
    }
  }
}